/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.google.samples.apps.adssched"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionName rootProject.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary true

        manifestPlaceholders = [crashlyticsEnabled: true]
        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            abiFilters 'armeabi-v7a'//,'x86', 'x86_64', 'armeabi', 'arm64-v8a'
        }

    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            manifestPlaceholders = [crashlyticsEnabled: true]
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            manifestPlaceholders = [crashlyticsEnabled: false]
        }
        staging {
            initWith debug

            // Specifies a sorted list of fallback build types that the
            // plugin should try to use when a dependency does not include a
            // "staging" build type.
            // Used with :test-shared, which doesn't have a staging variant.
            matchingFallbacks = ['debug']
        }
    }
//    kapt {
//        javacOptions {
//            // Increase the max count of errors from annotation processors.
//            // Default is 100.
//            option("-Xmaxerrs", 500)
//        }
//    }

    flavorDimensions "servingType"

    productFlavors {
        installed {
            dimension "servingType"
            versionCode rootProject.versionCodeMobile
        }
        instant {
            dimension "servingType"
            versionCode rootProject.versionCodeInstant
        }
    }
    dataBinding {
        enabled true
    }

    signingConfigs {
        // We need to sign debug builds with a debug key to make firebase auth happy
        debug {
            storeFile file("../debug.keystore")
            keyAlias "androiddebugkey"
            keyPassword "android"
            storePassword "android"
        }
    }

    // debug and release variants share the same source dir
    sourceSets {
        debug.java.srcDir 'src/debugRelease/java'
        release.java.srcDir 'src/debugRelease/java'
    }

    lintOptions {
        disable "InvalidPackage", "MissingTranslation"
    }

    testBuildType "staging"
}

dependencies {
    implementation project(':shared')
    testImplementation project(':test-shared')
    testImplementation project(':androidTest-shared')
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // UI
    implementation "androidx.appcompat:appcompat:$rootProject.appcompatVersion"
    implementation "androidx.browser:browser:$rootProject.browserVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayoutVersion"
    implementation "com.google.android.material:material:$rootProject.materialVersion"
    implementation "com.google.android:flexbox:$rootProject.flexboxVersion"

    // Architecture Components
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
    kapt "androidx.lifecycle:lifecycle-compiler:$rootProject.lifecycleVersion"
    testImplementation "androidx.arch.core:core-testing:$rootProject.lifecycleVersion"

    // Dagger
    implementation "com.google.dagger:dagger-android:$rootProject.dagger"
    implementation "com.google.dagger:dagger-android-support:$rootProject.dagger"
    kapt "com.google.dagger:dagger-compiler:$rootProject.dagger"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.dagger"

    // Glide
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    kapt "com.github.bumptech.glide:compiler:$rootProject.glideVersion"

    // Fabric and Firebase
    implementation "com.firebaseui:firebase-ui-auth:$rootProject.firebaseUiVersion"
    implementation "com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion"

    // Date and time API for Java.
    api "com.jakewharton.threetenabp:threetenabp:$rootProject.threetenabpVersion"
    testImplementation "org.threeten:threetenbp:$rootProject.threetenbpVersion"
    implementation "androidx.core:core-ktx:$rootProject.ktxVersion"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.kotlinVersion"

    // Instrumentation tests
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test:runner:$rootProject.runnerVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.rulesVersion"

    // Local unit tests
    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation "com.nhaarman:mockito-kotlin:$rootProject.mockitoKotlinVersion"
    testImplementation "org.hamcrest:hamcrest-library:$rootProject.hamcrestVersion"

    // Solve conflicts with gson. DataBinding is using an old version.
    implementation "com.google.code.gson:gson:$gsonVersion"
    kapt "com.android.databinding:compiler:$gradle_version"//这里的版本对应gradle的版本
}

apply plugin: 'com.google.gms.google-services'
